[{"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\reportWebVitals.js":"2","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class\\calculator.js":"3","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class\\calculator2.js":"4","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class2\\mapper.js":"5","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class3\\calculator3.js":"6","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class4\\lifecycle.js":"7","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\todo.js":"8","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\dialog.js":"9","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\example.js":"10","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\example2.js":"11","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class4\\dark.js":"12","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\dark2.js":"13","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\Api\\api.js":"14","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\Api\\login.js":"15"},{"size":895,"mtime":1612361282539,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1434,"mtime":1611577003883,"results":"19","hashOfConfig":"17"},{"size":980,"mtime":1611577014889,"results":"20","hashOfConfig":"17"},{"size":1850,"mtime":1611577028747,"results":"21","hashOfConfig":"17"},{"size":1861,"mtime":1611577041392,"results":"22","hashOfConfig":"17"},{"size":1135,"mtime":1611844979890,"results":"23","hashOfConfig":"17"},{"size":12092,"mtime":1612003868519,"results":"24","hashOfConfig":"17"},{"size":1624,"mtime":1611910252015,"results":"25","hashOfConfig":"17"},{"size":1906,"mtime":1611911407247,"results":"26","hashOfConfig":"17"},{"size":5951,"mtime":1611916405147,"results":"27","hashOfConfig":"17"},{"size":733,"mtime":1611924727137,"results":"28","hashOfConfig":"17"},{"size":1399,"mtime":1612004389421,"results":"29","hashOfConfig":"17"},{"size":1018,"mtime":1612356585392,"results":"30","hashOfConfig":"17"},{"size":4440,"mtime":1612404680742,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"mv42iy",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\index.js",["70","71","72","73","74","75","76","77"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculator2 from \"./component/class/calculator2\";\nimport Mapper from \"./component/class2/mapper\";\nimport Calculator3 from \"./component/class3/calculator3\";\nimport Lifecycle from \"./component/class4/lifecycle\";\nimport Todo from \"./component/todo/todo\";\nimport AlertDialog from \"./component/todo/dialog\";\nimport Fetcher from \"./component/Api/api\";\nimport Login from \"./component/Api/login\";\n\nimport App from \"./component/class4/dark\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Login />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["78","79"],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\reportWebVitals.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class\\calculator.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class\\calculator2.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class2\\mapper.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class3\\calculator3.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class4\\lifecycle.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\todo.js",["80","81","82"],"import React from \"react\";\r\nimport \"../style/style.css\";\r\n\r\nimport {Switch, Grid, Typography, Button, Paper } from \"@material-ui/core\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { dark, light } from \"@material-ui/core/styles/createPalette\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\r\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\r\n\r\nexport default class Todo extends React.Component {\r\n                 constructor(props) {\r\n                   super(props);\r\n\r\n                   this.state = {\r\n                     open: false,\r\n                     tasksArr: [],\r\n                     taskInput: \"\",\r\n                     tasksCompleted: [],\r\n                     tasksUndo: [],\r\n                     dark: false\r\n                   };\r\n                 }\r\n                 handleInput = (e) => {\r\n                   this.setState({\r\n                     taskInput: e.target.value\r\n                   });\r\n                 };\r\n                 handlePush = () => {\r\n                   var a1 = this.state.tasksArr;\r\n                   a1.push(this.state.taskInput);\r\n                   this.setState({\r\n                     tasksArr: a1,\r\n                     taskInput: \"\"\r\n                   });\r\n                 };\r\n                 handleComplete = (index) => {\r\n                   var a1 = this.state.tasksArr;\r\n                   var a = a1.splice(index, 1);\r\n                   var a2 = this.state.tasksCompleted;\r\n                   a2.push(a[0]);\r\n                   this.setState({\r\n                     tasksCompleted: a2\r\n                   });\r\n                 };\r\n                 handleUndo = (index) => {\r\n                   var a2 = this.state.tasksCompleted;\r\n                   var b = a2.splice(index, 1);\r\n                   var b2 = this.state.tasksUndo;\r\n                   b2.push(b[0]);\r\n                   this.setState({\r\n                     tasksArr: b2\r\n                   });\r\n                 };\r\n                 handleDelete = (index) => {\r\n                   var a2 = this.state.tasksCompleted;\r\n                   a2.splice(index, 1);\r\n                   this.setState({\r\n                     tasksCompleted: a2,\r\n                     open: false\r\n                   });\r\n                 };\r\n                 openDialog = () => {\r\n                   this.setState({ open: true });\r\n                 };\r\n                 closeDialog = () => {\r\n                   this.setState({ open: false });\r\n                 };\r\n                 toggleTheme = () => {\r\n                   this.setState({\r\n                     dark: !this.state.dark\r\n                   });\r\n                 };\r\n\r\n                 render() {\r\n                   return (\r\n                     <div>\r\n                       <ThemeProvider\r\n                         theme={createMuiTheme({\r\n                           palette: {\r\n                             type: this.state.dark ? \"dark\" : \"light\"\r\n                           }\r\n                         })}\r\n                       >\r\n                         <Paper style={{ height: \"100vh\" }}>\r\n                           <Grid container>\r\n                             <Grid item xs={12}>\r\n                               <Button onClick={this.toggleTheme}>\r\n                                 {this.state.dark ? (\r\n                                   <BrightnessHighIcon />\r\n                                 ) : (\r\n                                   <Brightness4Icon />\r\n                                 )}\r\n                                 {this.state.dark ? \"LIGHT MODE\" : \"DARK MODE\"}\r\n                               </Button>\r\n                             </Grid>\r\n                           </Grid>\r\n\r\n                           <center>\r\n                             <Grid container direction=\"column\">\r\n                               <Typography variant=\"h1\">Todo App</Typography>\r\n                             </Grid>\r\n                             <Grid item xs={12}>\r\n                               <Switch onChange={this.toggleTheme} />\r\n                             </Grid>\r\n\r\n                             <input\r\n                               style={{\r\n                                 borderRadius: 10,\r\n                                 height: 30,\r\n                                 width: 175,\r\n                                 outline: \"none\",\r\n                                 marginRight: 20\r\n                               }}\r\n                               placeholder=\"Enter The Task\"\r\n                               value={this.state.taskInput}\r\n                               onChange={this.handleInput}\r\n                             />\r\n                             <Button\r\n                               variant=\"contained\"\r\n                               color=\"primary\"\r\n                               size=\"small\"\r\n                               disabled={\r\n                                 this.state.taskInput === \"\" ? true : false\r\n                               }\r\n                               onClick={this.handlePush}\r\n                             >\r\n                               Add Task\r\n                             </Button>\r\n                           </center>\r\n                           <div class=\"float-container\">\r\n                             <div class=\"float-child\">\r\n                               {this.state.tasksArr.length === 0 ? (\r\n                                 <h2>You have No tasks to do</h2>\r\n                               ) : (\r\n                                 <h2>Tasks to do</h2>\r\n                               )}\r\n                               <div>\r\n                                 <ul>\r\n                                   {this.state.tasksArr.map((single, index) => {\r\n                                     return (\r\n                                       <li>\r\n                                         {single}\r\n                                         <br />\r\n                                         <Button\r\n                                           variant=\"contained\"\r\n                                           color=\"secondary\"\r\n                                           size=\"small\"\r\n                                           onClick={() => {\r\n                                             this.handleComplete(index, single);\r\n                                           }}\r\n                                         >\r\n                                           Completed\r\n                                         </Button>\r\n                                       </li>\r\n                                     );\r\n                                   })}\r\n                                 </ul>\r\n                               </div>\r\n                             </div>\r\n                             <div class=\"float-child2\">\r\n                               {this.state.tasksCompleted.length === 0 ? (\r\n                                 <h2>No Task Completed</h2>\r\n                               ) : (\r\n                                 <h2>Tasks Completed</h2>\r\n                               )}\r\n                               <div>\r\n                                 <ul>\r\n                                   {this.state.tasksCompleted.map(\r\n                                     (single, index) => {\r\n                                       return (\r\n                                         <li>\r\n                                           {single}\r\n                                           <br />\r\n                                           <Button\r\n                                             variant=\"contained\"\r\n                                             color=\"primary\"\r\n                                             size=\"small\"\r\n                                             onClick={() => {\r\n                                               this.handleUndo(index, single);\r\n                                             }}\r\n                                           >\r\n                                             Undo\r\n                                           </Button>\r\n\r\n                                           <Button\r\n                                             variant=\"contained\"\r\n                                             style={{\r\n                                               backgroundColor: \"darkred\"\r\n                                             }}\r\n                                             size=\"small\"\r\n                                             startIcon={<DeleteIcon />}\r\n                                             onClick={this.openDialog}\r\n                                           >\r\n                                             DELETE\r\n                                           </Button>\r\n                                           <Dialog\r\n                                             open={this.state.open}\r\n                                             onClose={this.closeDialog}\r\n                                             aria-labelledby=\"alert-dialog-title\"\r\n                                             aria-describedby=\"alert-dialog-description\"\r\n                                           >\r\n                                             <DialogTitle id=\"alert-dialog-title\">\r\n                                               {\"Delete the task\"}\r\n                                             </DialogTitle>\r\n                                             <DialogContent>\r\n                                               <DialogContentText id=\"alert-dialog-description\">\r\n                                                 Are you sure you want to do\r\n                                                 this?\r\n                                               </DialogContentText>\r\n                                             </DialogContent>\r\n                                             <DialogActions>\r\n                                               <Button\r\n                                                 variant=\"contained\"\r\n                                                 onClick={this.closeDialog}\r\n                                                 color=\"primary\"\r\n                                               >\r\n                                                 Cancel\r\n                                               </Button>\r\n                                               <Button\r\n                                                 variant=\"contained\"\r\n                                                 color=\"secondary\"\r\n                                                 onClick={() => {\r\n                                                   {\r\n                                                     this.handleDelete(index);\r\n                                                   }\r\n                                                 }}\r\n                                                 startIcon={<DeleteIcon />}\r\n                                                 onClose={this.closeDialog}\r\n                                               >\r\n                                                 Delete\r\n                                               </Button>\r\n                                             </DialogActions>\r\n                                           </Dialog>\r\n                                         </li>\r\n                                       );\r\n                                     }\r\n                                   )}\r\n                                 </ul>\r\n                               </div>\r\n                             </div>\r\n                           </div>\r\n                         </Paper>\r\n                       </ThemeProvider>\r\n                     </div>\r\n                   );\r\n                 }\r\n               }\r\n","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\dialog.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\example.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\example2.js",["83"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nexport default class Ex extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      open: false,\r\n      tasksArr: [],\r\n      taskInput: \"\",\r\n      tasksCompleted: [],\r\n      tasksUndo: []\r\n    };\r\n  }\r\n  openDialog = () => {\r\n    this.setState({ open: true });\r\n  };\r\n  closeDialog = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  handleInput = (e) => {\r\n    this.setState({\r\n      taskInput: e.target.value\r\n    });\r\n  };\r\n  handlePush = () => {\r\n    var a1 = this.state.tasksArr;\r\n    a1.push(this.state.taskInput);\r\n    this.setState({\r\n      tasksArr: a1,\r\n      taskInput: \"\"\r\n    });\r\n  };\r\n  handleComplete = (index) => {\r\n    var a1 = this.state.tasksArr;\r\n    var a = a1.splice(index, 1);\r\n    var a2 = this.state.tasksCompleted;\r\n    a2.push(a[0]);\r\n    this.setState({\r\n      tasksCompleted: a2\r\n    });\r\n  };\r\n  handleUndo = (index) => {\r\n    var a2 = this.state.tasksCompleted;\r\n    var b = a2.splice(index, 1);\r\n    var b2 = this.state.tasksUndo;\r\n    b2.push(b[0]);\r\n    this.setState({\r\n      tasksArr: b2\r\n    });\r\n  };\r\n  handleDelete = (index) => {\r\n    var a2 = this.state.tasksCompleted;\r\n    a2.splice(index, 1);\r\n    this.setState({\r\n      tasksCompleted: a2\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <input\r\n          style={{\r\n            borderRadius: 10,\r\n            height: 30,\r\n            width: 175,\r\n            outline: \"none\",\r\n            marginRight: 20\r\n          }}\r\n          placeholder=\"Enter The Task\"\r\n          value={this.state.taskInput}\r\n          onChange={this.handleInput}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          disabled={this.state.taskInput === \"\" ? true : false}\r\n          onClick={this.handlePush}\r\n        >\r\n          Add Task\r\n        </Button>\r\n\r\n        <div class=\"float-container\">\r\n          <div class=\"float-child\">\r\n            {this.state.tasksArr.length === 0 ? (\r\n              <h2>You have No tasks to do</h2>\r\n            ) : (\r\n              <h2>Tasks to do</h2>\r\n            )}\r\n            <div>\r\n              <ul>\r\n                {this.state.tasksArr.map((single, index) => {\r\n                  return (\r\n                    <li>\r\n                      {single}\r\n                      <br />\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                          this.handleComplete(index, single);\r\n                        }}\r\n                      >\r\n                        Completed\r\n                      </Button>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"float-child2\">\r\n            {this.state.tasksCompleted.length === 0 ? (\r\n              <h2>No Task Completed</h2>\r\n            ) : (\r\n              <h2>Tasks Completed</h2>\r\n            )}\r\n            <div>\r\n              <ul>\r\n                {this.state.tasksCompleted.map((single, index) => {\r\n                  return (\r\n                    <li>\r\n                      {single}\r\n                      <br />\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                          this.handleUndo(index, single);\r\n                        }}\r\n                      >\r\n                        Undo\r\n                      </Button>\r\n\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: \"darkred\" }}\r\n                        size=\"small\"\r\n                        onClick={this.openDialog}\r\n                      >\r\n                        DELETE\r\n                      </Button>\r\n                      <Dialog\r\n                        open={this.state.open}\r\n                        onClose={this.closeDialog}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                      >\r\n                        <DialogTitle id=\"alert-dialog-title\">\r\n                          {\"Delete the task\"}\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                          <DialogContentText id=\"alert-dialog-description\">\r\n                            Are you sure you want to do this?\r\n                          </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                          <Button onClick={this.closeDialog} color=\"primary\">\r\n                            Cancel\r\n                          </Button>\r\n                          <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              {\r\n                                this.handleDelete(index);\r\n                              }\r\n                            }}\r\n                            onClose={this.closeDialog}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </DialogActions>\r\n                      </Dialog>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["84","85"],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\class4\\dark.js",["86"],"import React, { useState } from \"react\";\r\nimport { Switch, Grid, Typography, Button, Paper } from \"@material-ui/core\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: darkMode ? \"dark\" : \"light\"\r\n    }\r\n  });\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper style={{ height: \"100vh\" }}>\r\n        <Grid container direction=\"column\">\r\n          <Typography variant=\"h1\">Todo App</Typography>\r\n\r\n          <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)} />\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n}\r\nexport default App;\r\n","C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\todo\\dark2.js",["87","88","89","90"],"import React from \"react\";\r\nimport { Switch, Grid, Typography, Button, Paper } from \"@material-ui/core\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { dark, light } from \"@material-ui/core/styles/createPalette\";\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\r\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\r\n\r\nexport default class Dark2 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dark: false\r\n    };\r\n  }\r\n  toggleTheme = () => {\r\n    this.setState({\r\n      dark: !this.state.dark\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ThemeProvider\r\n          theme={createMuiTheme({\r\n            palette: {\r\n              type: this.state.dark ? \"dark\" : \"light\"\r\n            }\r\n          })}\r\n        >\r\n          <Paper style={{ height: \"100vh\" }}>\r\n            <Grid container>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.toggleTheme}>\r\n                  {this.state.dark ? (\r\n                    <BrightnessHighIcon />\r\n                  ) : (\r\n                    <Brightness4Icon />\r\n                  )}\r\n                  {this.state.dark ? \"LIGHT MODE\" : \"DARK MODE\"}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </ThemeProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["91","92"],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\Api\\api.js",[],"C:\\Users\\USER\\Desktop\\App stone\\bikram-react\\src\\component\\Api\\login.js",[],{"ruleId":"93","severity":1,"message":"94","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":19},{"ruleId":"93","severity":1,"message":"97","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":14},{"ruleId":"93","severity":1,"message":"98","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":19},{"ruleId":"93","severity":1,"message":"99","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":17},{"ruleId":"93","severity":1,"message":"100","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":12},{"ruleId":"93","severity":1,"message":"101","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":19},{"ruleId":"93","severity":1,"message":"102","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":15},{"ruleId":"93","severity":1,"message":"103","line":12,"column":8,"nodeType":"95","messageId":"96","endLine":12,"endColumn":11},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"93","severity":1,"message":"108","line":6,"column":10,"nodeType":"95","messageId":"96","endLine":6,"endColumn":14},{"ruleId":"93","severity":1,"message":"109","line":6,"column":16,"nodeType":"95","messageId":"96","endLine":6,"endColumn":21},{"ruleId":"110","severity":1,"message":"111","line":229,"column":52,"nodeType":"112","messageId":"113","endLine":231,"endColumn":53},{"ruleId":"110","severity":1,"message":"111","line":174,"column":31,"nodeType":"112","messageId":"113","endLine":176,"endColumn":32},{"ruleId":"104","replacedBy":"114"},{"ruleId":"106","replacedBy":"115"},{"ruleId":"93","severity":1,"message":"116","line":2,"column":36,"nodeType":"95","messageId":"96","endLine":2,"endColumn":42},{"ruleId":"93","severity":1,"message":"117","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":16},{"ruleId":"93","severity":1,"message":"118","line":2,"column":24,"nodeType":"95","messageId":"96","endLine":2,"endColumn":34},{"ruleId":"93","severity":1,"message":"108","line":4,"column":10,"nodeType":"95","messageId":"96","endLine":4,"endColumn":14},{"ruleId":"93","severity":1,"message":"109","line":4,"column":16,"nodeType":"95","messageId":"96","endLine":4,"endColumn":21},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},"no-unused-vars","'Calculator2' is defined but never used.","Identifier","unusedVar","'Mapper' is defined but never used.","'Calculator3' is defined but never used.","'Lifecycle' is defined but never used.","'Todo' is defined but never used.","'AlertDialog' is defined but never used.","'Fetcher' is defined but never used.","'App' is defined but never used.","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"'dark' is defined but never used.","'light' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["121"],["122"],"'Button' is defined but never used.","'Switch' is defined but never used.","'Typography' is defined but never used.",["121"],["122"],"no-global-assign","no-unsafe-negation"]